#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="University_EWSD")]
public partial class EWSDDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  partial void InsertClosureDate(ClosureDate instance);
  partial void UpdateClosureDate(ClosureDate instance);
  partial void DeleteClosureDate(ClosureDate instance);
  partial void InsertComment(Comment instance);
  partial void UpdateComment(Comment instance);
  partial void DeleteComment(Comment instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertDocumentSupport(DocumentSupport instance);
  partial void UpdateDocumentSupport(DocumentSupport instance);
  partial void DeleteDocumentSupport(DocumentSupport instance);
  partial void InsertIdea(Idea instance);
  partial void UpdateIdea(Idea instance);
  partial void DeleteIdea(Idea instance);
  partial void InsertReaction(Reaction instance);
  partial void UpdateReaction(Reaction instance);
  partial void DeleteReaction(Reaction instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  #endregion
	
	public EWSDDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["University_EWSDConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public EWSDDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EWSDDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EWSDDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EWSDDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
	
	public System.Data.Linq.Table<ClosureDate> ClosureDates
	{
		get
		{
			return this.GetTable<ClosureDate>();
		}
	}
	
	public System.Data.Linq.Table<Comment> Comments
	{
		get
		{
			return this.GetTable<Comment>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<DocumentSupport> DocumentSupports
	{
		get
		{
			return this.GetTable<DocumentSupport>();
		}
	}
	
	public System.Data.Linq.Table<Idea> Ideas
	{
		get
		{
			return this.GetTable<Idea>();
		}
	}
	
	public System.Data.Linq.Table<Reaction> Reactions
	{
		get
		{
			return this.GetTable<Reaction>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetIdeaDetail")]
	public ISingleResult<GetIdeaDetailResult> GetIdeaDetail([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IdeaID", DbType="Int")] System.Nullable<int> ideaID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ideaID, userID);
		return ((ISingleResult<GetIdeaDetailResult>)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_GetCategory")]
	public ISingleResult<sp_GetCategoryResult> sp_GetCategory()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<sp_GetCategoryResult>)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_GetQACoordinator")]
	public ISingleResult<sp_GetQACoordinatorResult> sp_GetQACoordinator([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Did", DbType="Int")] System.Nullable<int> did)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), did);
		return ((ISingleResult<sp_GetQACoordinatorResult>)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Iden;
	
	private string _IDUsers;
	
	private string _Password;
	
	private string _FirstName;
	
	private string _LastName;
	
	private System.DateTime _Birthdate;
	
	private bool _Gender;
	
	private string _Phone;
	
	private string _Address;
	
	private string _Email;
	
	private int _RoleID;
	
	private System.Nullable<int> _DepID;
	
	private EntitySet<Comment> _Comments;
	
	private EntitySet<Idea> _Ideas;
	
	private EntitySet<Reaction> _Reactions;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<Role> _Role;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_IdenChanging(int value);
    partial void OnID_IdenChanged();
    partial void OnIDUsersChanging(string value);
    partial void OnIDUsersChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnBirthdateChanging(System.DateTime value);
    partial void OnBirthdateChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnDepIDChanging(System.Nullable<int> value);
    partial void OnDepIDChanged();
    #endregion
	
	public User()
	{
		this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
		this._Ideas = new EntitySet<Idea>(new Action<Idea>(this.attach_Ideas), new Action<Idea>(this.detach_Ideas));
		this._Reactions = new EntitySet<Reaction>(new Action<Reaction>(this.attach_Reactions), new Action<Reaction>(this.detach_Reactions));
		this._Department = default(EntityRef<Department>);
		this._Role = default(EntityRef<Role>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Iden", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Iden
	{
		get
		{
			return this._ID_Iden;
		}
		set
		{
			if ((this._ID_Iden != value))
			{
				this.OnID_IdenChanging(value);
				this.SendPropertyChanging();
				this._ID_Iden = value;
				this.SendPropertyChanged("ID_Iden");
				this.OnID_IdenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUsers", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string IDUsers
	{
		get
		{
			return this._IDUsers;
		}
		set
		{
			if ((this._IDUsers != value))
			{
				this.OnIDUsersChanging(value);
				this.SendPropertyChanging();
				this._IDUsers = value;
				this.SendPropertyChanged("IDUsers");
				this.OnIDUsersChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="DateTime NOT NULL")]
	public System.DateTime Birthdate
	{
		get
		{
			return this._Birthdate;
		}
		set
		{
			if ((this._Birthdate != value))
			{
				this.OnBirthdateChanging(value);
				this.SendPropertyChanging();
				this._Birthdate = value;
				this.SendPropertyChanged("Birthdate");
				this.OnBirthdateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
	public bool Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
	public int RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", DbType="Int")]
	public System.Nullable<int> DepID
	{
		get
		{
			return this._DepID;
		}
		set
		{
			if ((this._DepID != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepIDChanging(value);
				this.SendPropertyChanging();
				this._DepID = value;
				this.SendPropertyChanged("DepID");
				this.OnDepIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="ID_Iden", OtherKey="ID_Iden")]
	public EntitySet<Comment> Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			this._Comments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Idea", Storage="_Ideas", ThisKey="ID_Iden", OtherKey="ID_Iden")]
	public EntitySet<Idea> Ideas
	{
		get
		{
			return this._Ideas;
		}
		set
		{
			this._Ideas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Reaction", Storage="_Reactions", ThisKey="ID_Iden", OtherKey="UserID")]
	public EntitySet<Reaction> Reactions
	{
		get
		{
			return this._Reactions;
		}
		set
		{
			this._Reactions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_User", Storage="_Department", ThisKey="DepID", OtherKey="DepID", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._DepID = value.DepID;
				}
				else
				{
					this._DepID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._RoleID = value.RoleID;
				}
				else
				{
					this._RoleID = default(int);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Ideas(Idea entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Ideas(Idea entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Reactions(Reaction entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Reactions(Reaction entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CatID;
	
	private string _Name;
	
	private System.Nullable<System.DateTime> _CreateDate;
	
	private System.Nullable<int> _CreateBy;
	
	private EntitySet<Idea> _Ideas;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnCreateByChanging(System.Nullable<int> value);
    partial void OnCreateByChanged();
    #endregion
	
	public Category()
	{
		this._Ideas = new EntitySet<Idea>(new Action<Idea>(this.attach_Ideas), new Action<Idea>(this.detach_Ideas));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CatID
	{
		get
		{
			return this._CatID;
		}
		set
		{
			if ((this._CatID != value))
			{
				this.OnCatIDChanging(value);
				this.SendPropertyChanging();
				this._CatID = value;
				this.SendPropertyChanged("CatID");
				this.OnCatIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateBy", DbType="Int")]
	public System.Nullable<int> CreateBy
	{
		get
		{
			return this._CreateBy;
		}
		set
		{
			if ((this._CreateBy != value))
			{
				this.OnCreateByChanging(value);
				this.SendPropertyChanging();
				this._CreateBy = value;
				this.SendPropertyChanged("CreateBy");
				this.OnCreateByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Idea", Storage="_Ideas", ThisKey="CatID", OtherKey="CatID")]
	public EntitySet<Idea> Ideas
	{
		get
		{
			return this._Ideas;
		}
		set
		{
			this._Ideas.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Ideas(Idea entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_Ideas(Idea entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClosureDate")]
public partial class ClosureDate : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<System.DateTime> _ClosureDate1;
	
	private System.Nullable<System.DateTime> _FinalClosureDate;
	
	private System.Nullable<System.DateTime> _CreateDate;
	
	private System.Nullable<int> _CreateBy;
	
	private bool _Status;
	
	private System.Nullable<System.DateTime> _YearStart;
	
	private System.Nullable<System.DateTime> _YearEnd;
	
	private EntitySet<Idea> _Ideas;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClosureDate1Changing(System.Nullable<System.DateTime> value);
    partial void OnClosureDate1Changed();
    partial void OnFinalClosureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinalClosureDateChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnCreateByChanging(System.Nullable<int> value);
    partial void OnCreateByChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnYearStartChanging(System.Nullable<System.DateTime> value);
    partial void OnYearStartChanged();
    partial void OnYearEndChanging(System.Nullable<System.DateTime> value);
    partial void OnYearEndChanged();
    #endregion
	
	public ClosureDate()
	{
		this._Ideas = new EntitySet<Idea>(new Action<Idea>(this.attach_Ideas), new Action<Idea>(this.detach_Ideas));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ClosureDate", Storage="_ClosureDate1", DbType="DateTime")]
	public System.Nullable<System.DateTime> ClosureDate1
	{
		get
		{
			return this._ClosureDate1;
		}
		set
		{
			if ((this._ClosureDate1 != value))
			{
				this.OnClosureDate1Changing(value);
				this.SendPropertyChanging();
				this._ClosureDate1 = value;
				this.SendPropertyChanged("ClosureDate1");
				this.OnClosureDate1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalClosureDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> FinalClosureDate
	{
		get
		{
			return this._FinalClosureDate;
		}
		set
		{
			if ((this._FinalClosureDate != value))
			{
				this.OnFinalClosureDateChanging(value);
				this.SendPropertyChanging();
				this._FinalClosureDate = value;
				this.SendPropertyChanged("FinalClosureDate");
				this.OnFinalClosureDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateBy", DbType="Int")]
	public System.Nullable<int> CreateBy
	{
		get
		{
			return this._CreateBy;
		}
		set
		{
			if ((this._CreateBy != value))
			{
				this.OnCreateByChanging(value);
				this.SendPropertyChanging();
				this._CreateBy = value;
				this.SendPropertyChanged("CreateBy");
				this.OnCreateByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
	public bool Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearStart", DbType="DateTime")]
	public System.Nullable<System.DateTime> YearStart
	{
		get
		{
			return this._YearStart;
		}
		set
		{
			if ((this._YearStart != value))
			{
				this.OnYearStartChanging(value);
				this.SendPropertyChanging();
				this._YearStart = value;
				this.SendPropertyChanged("YearStart");
				this.OnYearStartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearEnd", DbType="DateTime")]
	public System.Nullable<System.DateTime> YearEnd
	{
		get
		{
			return this._YearEnd;
		}
		set
		{
			if ((this._YearEnd != value))
			{
				this.OnYearEndChanging(value);
				this.SendPropertyChanging();
				this._YearEnd = value;
				this.SendPropertyChanged("YearEnd");
				this.OnYearEndChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClosureDate_Idea", Storage="_Ideas", ThisKey="Id", OtherKey="ID_Date")]
	public EntitySet<Idea> Ideas
	{
		get
		{
			return this._Ideas;
		}
		set
		{
			this._Ideas.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Ideas(Idea entity)
	{
		this.SendPropertyChanging();
		entity.ClosureDate = this;
	}
	
	private void detach_Ideas(Idea entity)
	{
		this.SendPropertyChanging();
		entity.ClosureDate = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ComID;
	
	private int _IdeaID;
	
	private System.DateTime _DateCreated;
	
	private bool _Anonymous;
	
	private int _ID_Iden;
	
	private string _Content;
	
	private EntityRef<User> _User;
	
	private EntityRef<Idea> _Idea;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComIDChanging(int value);
    partial void OnComIDChanged();
    partial void OnIdeaIDChanging(int value);
    partial void OnIdeaIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnAnonymousChanging(bool value);
    partial void OnAnonymousChanged();
    partial void OnID_IdenChanging(int value);
    partial void OnID_IdenChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
	
	public Comment()
	{
		this._User = default(EntityRef<User>);
		this._Idea = default(EntityRef<Idea>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ComID
	{
		get
		{
			return this._ComID;
		}
		set
		{
			if ((this._ComID != value))
			{
				this.OnComIDChanging(value);
				this.SendPropertyChanging();
				this._ComID = value;
				this.SendPropertyChanged("ComID");
				this.OnComIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdeaID", DbType="Int NOT NULL")]
	public int IdeaID
	{
		get
		{
			return this._IdeaID;
		}
		set
		{
			if ((this._IdeaID != value))
			{
				if (this._Idea.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdeaIDChanging(value);
				this.SendPropertyChanging();
				this._IdeaID = value;
				this.SendPropertyChanged("IdeaID");
				this.OnIdeaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anonymous", DbType="Bit NOT NULL")]
	public bool Anonymous
	{
		get
		{
			return this._Anonymous;
		}
		set
		{
			if ((this._Anonymous != value))
			{
				this.OnAnonymousChanging(value);
				this.SendPropertyChanging();
				this._Anonymous = value;
				this.SendPropertyChanged("Anonymous");
				this.OnAnonymousChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Iden", DbType="Int NOT NULL")]
	public int ID_Iden
	{
		get
		{
			return this._ID_Iden;
		}
		set
		{
			if ((this._ID_Iden != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_IdenChanging(value);
				this.SendPropertyChanging();
				this._ID_Iden = value;
				this.SendPropertyChanged("ID_Iden");
				this.OnID_IdenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="ID_Iden", OtherKey="ID_Iden", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Comments.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Comments.Add(this);
					this._ID_Iden = value.ID_Iden;
				}
				else
				{
					this._ID_Iden = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Comment", Storage="_Idea", ThisKey="IdeaID", OtherKey="IdeaID", IsForeignKey=true)]
	public Idea Idea
	{
		get
		{
			return this._Idea.Entity;
		}
		set
		{
			Idea previousValue = this._Idea.Entity;
			if (((previousValue != value) 
						|| (this._Idea.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Idea.Entity = null;
					previousValue.Comments.Remove(this);
				}
				this._Idea.Entity = value;
				if ((value != null))
				{
					value.Comments.Add(this);
					this._IdeaID = value.IdeaID;
				}
				else
				{
					this._IdeaID = default(int);
				}
				this.SendPropertyChanged("Idea");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DepID;
	
	private string _Name;
	
	private string _Address;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepIDChanging(int value);
    partial void OnDepIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
	
	public Department()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DepID
	{
		get
		{
			return this._DepID;
		}
		set
		{
			if ((this._DepID != value))
			{
				this.OnDepIDChanging(value);
				this.SendPropertyChanging();
				this._DepID = value;
				this.SendPropertyChanged("DepID");
				this.OnDepIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_User", Storage="_Users", ThisKey="DepID", OtherKey="DepID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSupport")]
public partial class DocumentSupport : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DocID;
	
	private System.Nullable<int> _IdeaID;
	
	private string _Location;
	
	private EntityRef<Idea> _Idea;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnIdeaIDChanging(System.Nullable<int> value);
    partial void OnIdeaIDChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
	
	public DocumentSupport()
	{
		this._Idea = default(EntityRef<Idea>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DocID
	{
		get
		{
			return this._DocID;
		}
		set
		{
			if ((this._DocID != value))
			{
				this.OnDocIDChanging(value);
				this.SendPropertyChanging();
				this._DocID = value;
				this.SendPropertyChanged("DocID");
				this.OnDocIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdeaID", DbType="Int")]
	public System.Nullable<int> IdeaID
	{
		get
		{
			return this._IdeaID;
		}
		set
		{
			if ((this._IdeaID != value))
			{
				if (this._Idea.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdeaIDChanging(value);
				this.SendPropertyChanging();
				this._IdeaID = value;
				this.SendPropertyChanged("IdeaID");
				this.OnIdeaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_DocumentSupport", Storage="_Idea", ThisKey="IdeaID", OtherKey="IdeaID", IsForeignKey=true)]
	public Idea Idea
	{
		get
		{
			return this._Idea.Entity;
		}
		set
		{
			Idea previousValue = this._Idea.Entity;
			if (((previousValue != value) 
						|| (this._Idea.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Idea.Entity = null;
					previousValue.DocumentSupports.Remove(this);
				}
				this._Idea.Entity = value;
				if ((value != null))
				{
					value.DocumentSupports.Add(this);
					this._IdeaID = value.IdeaID;
				}
				else
				{
					this._IdeaID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Idea");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Idea")]
public partial class Idea : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdeaID;
	
	private int _CatID;
	
	private System.DateTime _DateCreated;
	
	private bool _Anonymous;
	
	private System.Nullable<int> _ID_Iden;
	
	private int _Views;
	
	private bool _Status;
	
	private string _Title;
	
	private string _Content;
	
	private System.Nullable<int> _ID_Date;
	
	private EntitySet<Comment> _Comments;
	
	private EntitySet<DocumentSupport> _DocumentSupports;
	
	private EntitySet<Reaction> _Reactions;
	
	private EntityRef<Category> _Category;
	
	private EntityRef<ClosureDate> _ClosureDate;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdeaIDChanging(int value);
    partial void OnIdeaIDChanged();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnAnonymousChanging(bool value);
    partial void OnAnonymousChanged();
    partial void OnID_IdenChanging(System.Nullable<int> value);
    partial void OnID_IdenChanged();
    partial void OnViewsChanging(int value);
    partial void OnViewsChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnID_DateChanging(System.Nullable<int> value);
    partial void OnID_DateChanged();
    #endregion
	
	public Idea()
	{
		this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
		this._DocumentSupports = new EntitySet<DocumentSupport>(new Action<DocumentSupport>(this.attach_DocumentSupports), new Action<DocumentSupport>(this.detach_DocumentSupports));
		this._Reactions = new EntitySet<Reaction>(new Action<Reaction>(this.attach_Reactions), new Action<Reaction>(this.detach_Reactions));
		this._Category = default(EntityRef<Category>);
		this._ClosureDate = default(EntityRef<ClosureDate>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdeaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IdeaID
	{
		get
		{
			return this._IdeaID;
		}
		set
		{
			if ((this._IdeaID != value))
			{
				this.OnIdeaIDChanging(value);
				this.SendPropertyChanging();
				this._IdeaID = value;
				this.SendPropertyChanged("IdeaID");
				this.OnIdeaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", DbType="Int NOT NULL")]
	public int CatID
	{
		get
		{
			return this._CatID;
		}
		set
		{
			if ((this._CatID != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatIDChanging(value);
				this.SendPropertyChanging();
				this._CatID = value;
				this.SendPropertyChanged("CatID");
				this.OnCatIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anonymous", DbType="Bit NOT NULL")]
	public bool Anonymous
	{
		get
		{
			return this._Anonymous;
		}
		set
		{
			if ((this._Anonymous != value))
			{
				this.OnAnonymousChanging(value);
				this.SendPropertyChanging();
				this._Anonymous = value;
				this.SendPropertyChanged("Anonymous");
				this.OnAnonymousChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Iden", DbType="Int")]
	public System.Nullable<int> ID_Iden
	{
		get
		{
			return this._ID_Iden;
		}
		set
		{
			if ((this._ID_Iden != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_IdenChanging(value);
				this.SendPropertyChanging();
				this._ID_Iden = value;
				this.SendPropertyChanged("ID_Iden");
				this.OnID_IdenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Views", DbType="Int NOT NULL")]
	public int Views
	{
		get
		{
			return this._Views;
		}
		set
		{
			if ((this._Views != value))
			{
				this.OnViewsChanging(value);
				this.SendPropertyChanging();
				this._Views = value;
				this.SendPropertyChanged("Views");
				this.OnViewsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
	public bool Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Date", DbType="Int")]
	public System.Nullable<int> ID_Date
	{
		get
		{
			return this._ID_Date;
		}
		set
		{
			if ((this._ID_Date != value))
			{
				if (this._ClosureDate.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_DateChanging(value);
				this.SendPropertyChanging();
				this._ID_Date = value;
				this.SendPropertyChanged("ID_Date");
				this.OnID_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Comment", Storage="_Comments", ThisKey="IdeaID", OtherKey="IdeaID")]
	public EntitySet<Comment> Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			this._Comments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_DocumentSupport", Storage="_DocumentSupports", ThisKey="IdeaID", OtherKey="IdeaID")]
	public EntitySet<DocumentSupport> DocumentSupports
	{
		get
		{
			return this._DocumentSupports;
		}
		set
		{
			this._DocumentSupports.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Reaction", Storage="_Reactions", ThisKey="IdeaID", OtherKey="IdeaID")]
	public EntitySet<Reaction> Reactions
	{
		get
		{
			return this._Reactions;
		}
		set
		{
			this._Reactions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Idea", Storage="_Category", ThisKey="CatID", OtherKey="CatID", IsForeignKey=true)]
	public Category Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			Category previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.Ideas.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.Ideas.Add(this);
					this._CatID = value.CatID;
				}
				else
				{
					this._CatID = default(int);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClosureDate_Idea", Storage="_ClosureDate", ThisKey="ID_Date", OtherKey="Id", IsForeignKey=true)]
	public ClosureDate ClosureDate
	{
		get
		{
			return this._ClosureDate.Entity;
		}
		set
		{
			ClosureDate previousValue = this._ClosureDate.Entity;
			if (((previousValue != value) 
						|| (this._ClosureDate.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ClosureDate.Entity = null;
					previousValue.Ideas.Remove(this);
				}
				this._ClosureDate.Entity = value;
				if ((value != null))
				{
					value.Ideas.Add(this);
					this._ID_Date = value.Id;
				}
				else
				{
					this._ID_Date = default(Nullable<int>);
				}
				this.SendPropertyChanged("ClosureDate");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Idea", Storage="_User", ThisKey="ID_Iden", OtherKey="ID_Iden", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Ideas.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Ideas.Add(this);
					this._ID_Iden = value.ID_Iden;
				}
				else
				{
					this._ID_Iden = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.Idea = this;
	}
	
	private void detach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.Idea = null;
	}
	
	private void attach_DocumentSupports(DocumentSupport entity)
	{
		this.SendPropertyChanging();
		entity.Idea = this;
	}
	
	private void detach_DocumentSupports(DocumentSupport entity)
	{
		this.SendPropertyChanging();
		entity.Idea = null;
	}
	
	private void attach_Reactions(Reaction entity)
	{
		this.SendPropertyChanging();
		entity.Idea = this;
	}
	
	private void detach_Reactions(Reaction entity)
	{
		this.SendPropertyChanging();
		entity.Idea = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reaction")]
public partial class Reaction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdeaID;
	
	private int _UserID;
	
	private int _Status;
	
	private EntityRef<Idea> _Idea;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdeaIDChanging(int value);
    partial void OnIdeaIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
	
	public Reaction()
	{
		this._Idea = default(EntityRef<Idea>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdeaID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IdeaID
	{
		get
		{
			return this._IdeaID;
		}
		set
		{
			if ((this._IdeaID != value))
			{
				if (this._Idea.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdeaIDChanging(value);
				this.SendPropertyChanging();
				this._IdeaID = value;
				this.SendPropertyChanged("IdeaID");
				this.OnIdeaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
	public int Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Idea_Reaction", Storage="_Idea", ThisKey="IdeaID", OtherKey="IdeaID", IsForeignKey=true)]
	public Idea Idea
	{
		get
		{
			return this._Idea.Entity;
		}
		set
		{
			Idea previousValue = this._Idea.Entity;
			if (((previousValue != value) 
						|| (this._Idea.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Idea.Entity = null;
					previousValue.Reactions.Remove(this);
				}
				this._Idea.Entity = value;
				if ((value != null))
				{
					value.Reactions.Add(this);
					this._IdeaID = value.IdeaID;
				}
				else
				{
					this._IdeaID = default(int);
				}
				this.SendPropertyChanged("Idea");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Reaction", Storage="_User", ThisKey="UserID", OtherKey="ID_Iden", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Reactions.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Reactions.Add(this);
					this._UserID = value.ID_Iden;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RoleID;
	
	private string _RoleName;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
	
	public Role()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this.OnRoleNameChanging(value);
				this.SendPropertyChanging();
				this._RoleName = value;
				this.SendPropertyChanged("RoleName");
				this.OnRoleNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleID", OtherKey="RoleID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
}

public partial class GetIdeaDetailResult
{
	
	private string _Content;
	
	private int _Status;
	
	public GetIdeaDetailResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this._Content = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
	public int Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this._Status = value;
			}
		}
	}
}

public partial class sp_GetCategoryResult
{
	
	private int _CatID;
	
	private string _Name;
	
	private System.Nullable<int> _count;
	
	public sp_GetCategoryResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", DbType="Int NOT NULL")]
	public int CatID
	{
		get
		{
			return this._CatID;
		}
		set
		{
			if ((this._CatID != value))
			{
				this._CatID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this._Name = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int")]
	public System.Nullable<int> count
	{
		get
		{
			return this._count;
		}
		set
		{
			if ((this._count != value))
			{
				this._count = value;
			}
		}
	}
}

public partial class sp_GetQACoordinatorResult
{
	
	private int _ID_Iden;
	
	private string _IDUsers;
	
	private string _Password;
	
	private string _FirstName;
	
	private string _LastName;
	
	private System.DateTime _Birthdate;
	
	private bool _Gender;
	
	private string _Phone;
	
	private string _Address;
	
	private string _Email;
	
	private int _RoleID;
	
	private System.Nullable<int> _DepID;
	
	private int _RoleID1;
	
	private string _RoleName;
	
	public sp_GetQACoordinatorResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Iden", DbType="Int NOT NULL")]
	public int ID_Iden
	{
		get
		{
			return this._ID_Iden;
		}
		set
		{
			if ((this._ID_Iden != value))
			{
				this._ID_Iden = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUsers", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string IDUsers
	{
		get
		{
			return this._IDUsers;
		}
		set
		{
			if ((this._IDUsers != value))
			{
				this._IDUsers = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this._Password = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this._FirstName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this._LastName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="DateTime NOT NULL")]
	public System.DateTime Birthdate
	{
		get
		{
			return this._Birthdate;
		}
		set
		{
			if ((this._Birthdate != value))
			{
				this._Birthdate = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
	public bool Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this._Gender = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this._Phone = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this._Address = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this._Email = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
	public int RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				this._RoleID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", DbType="Int")]
	public System.Nullable<int> DepID
	{
		get
		{
			return this._DepID;
		}
		set
		{
			if ((this._DepID != value))
			{
				this._DepID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID1", DbType="Int NOT NULL")]
	public int RoleID1
	{
		get
		{
			return this._RoleID1;
		}
		set
		{
			if ((this._RoleID1 != value))
			{
				this._RoleID1 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this._RoleName = value;
			}
		}
	}
}
#pragma warning restore 1591
